# yaml-language-server: $schema=./deploy.yml
name: Bulk Validate

on:
  #   pull_request:
  #     branches:
  #       - main
  workflow_call:
    inputs:
      resourceGroupName:
        required: true
        type: string
      reviewApiUrl:
        required: true
        type: string

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      reviewApiKey:
        required: true

jobs:
  generateInputPaths:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Generate matrix ### Followed this example - https://github.com/Sylius/Sylius/blob/3464e8d0ae6673d9ee1da3d538a6b399cfcb9852/.github/workflows/packages.yml#L48
        working-directory: ${{ github.workspace }}/deploy
        id: set-matrix
        run: |
          echo "::set-output name=matrix::$(find . -mindepth 1 -type d | sed -e 's/.\///' | sort | jq  --raw-input . | jq --slurp . | jq -c .)"
          echo '#################################'
          echo $matrix
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  validate:
    needs: generateInputPaths
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.generateInputPaths.outputs.matrix) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.0.9

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Initialize Terraform
      #   working-directory: ${{ github.workspace }}/deploy
      #   run: |
      #     terraform init -input=false

      # - name: Plan Terraform
      #   working-directory: ${{ github.workspace }}/deploy
      #   id: plan
      #   continue-on-error: true
      #   run: |
      #     terraform plan -input=false -no-color

      - name: Run what-if
        uses: azure/arm-deploy@v1
        id: validate
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ${{ github.workspace }}/deploy/main.bicep
          parameters: >
            ${{ github.workspace }}/deploy/${{ matrix.path }}/parameters.json
            reviewApiUrl=${{ inputs.reviewApiUrl }}
            reviewApiKey=${{ secrets.reviewApiKey }}
          additionalArguments: --what-if

      # - name: Post Plan to GitHub PR
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     allow-repeats: true
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: "github-actions[bot]"
      #     message: |
      #       ## ${{ matrix.path }} plan
      #       ```
      #       ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
      #       ```
